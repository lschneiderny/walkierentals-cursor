// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts   Account[]
  sessions   Session[]
  rentals    Rental[]
  packages   Package[]
  retailItems RetailItem[]
  orders     Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  CUSTOMER
  EMPLOYEE
  ADMIN
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  rentals    Rental[]
  packages   Package[]
  retailItems RetailItem[]
  orders     Order[]
}

model Rental {
  id          String      @id @default(cuid())
  slug        String      @unique
  itemId      String      @unique
  name        String
  description String?
  dailyRate   Float
  image       String?
  categoryId  String
  currentInventory Int    @default(0)
  available   Boolean     @default(true)
  specs       Json?       // Technical specifications
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String      // Employee who created/updated
  availabilityDate DateTime?
  searchTags  String?

  category Category @relation(fields: [categoryId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
  orders   Order[]
  packageItems PackageItem[]
}

model Package {
  id          String   @id @default(cuid())
  slug        String   @unique
  packageId   String   @unique
  name        String
  description String?
  dailyRate   Float
  image       String?
  categoryId  String
  searchTags  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   // Employee who created/updated
  packageItems PackageItem[]

  category Category @relation(fields: [categoryId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}

model PackageItem {
  id        String   @id @default(cuid())
  packageId String
  rentalId  String
  count     Int

  package Package @relation(fields: [packageId], references: [id], onDelete: Cascade)
  rental  Rental  @relation(fields: [rentalId], references: [id])

  @@unique([packageId, rentalId])
}

model RetailItem {
  id          String   @id @default(cuid())
  slug        String   @unique
  itemId      String   @unique
  name        String
  description String?
  unitCost    Float
  image       String?
  categoryId  String
  currentInventory Int @default(0)
  available   Boolean  @default(true)
  specs       Json?    // Technical specifications
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   // Employee who created/updated
  searchTags  String?

  category Category @relation(fields: [categoryId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
}

model Order {
  id          String   @id @default(cuid())
  userId      String
  status      OrderStatus @default(PENDING)
  total       Float
  rentalStart DateTime?
  rentalEnd   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  rentals    Rental[]
  items      OrderItem[]
}

model OrderItem {
  id           String   @id @default(cuid())
  orderId      String
  retailItemId String
  quantity     Int
  price        Float

  order      Order       @relation(fields: [orderId], references: [id])
  retailItem RetailItem @relation(fields: [retailItemId], references: [id])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  RETURNED
  CANCELLED
}
